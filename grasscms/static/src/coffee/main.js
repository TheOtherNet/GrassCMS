// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window) {
    var Plugin, defaults, document, pluginName;
    pluginName = 'PersistentGrass';
    document = window.document;
    defaults = {
      debug: false,
      offset: 250
    };
    Plugin = (function() {

      function Plugin(element, options) {
        this.element = element;
        this.options = $.extend({}, defaults, options);
        this.element = $(this.element);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
      }

      Plugin.prototype.init = function() {
        this.do_resizable();
        this.element.on('mouseenter', this.mouseenter);
        this.element.on('mouseleave', this.mouseleave);
        this.element.on('dragstart', this.dragstart);
        this.element.on('drag', this.drag);
        this.element.on('dragend', this.dragend);
        this.element.on('click', this.element_clicked);
        this.element.on('changed', this.changed);
        this.element.data('offset', this.options.offset);
        return $('#current_element_name').html("GrassCMS");
      };

      Plugin.prototype.element_clicked = function(ev) {
        var foo, source, text;
        foo = $($(this).children()[0]).attr('id');
        $('#panel_left').data('current_element', foo);
        if ($(this).children('img').attr('src')) {
          source = $(this).children('img').attr('src').split('/');
          text = source[source.length - 1];
        } else if ($(this).children('div')) {
          text = "Text element";
        }
        if (ev.shiftKey) {
          $($(this).children()[0]).attr('contentEditable', 'true');
        }
        return $('#current_element_name').html(text);
      };

      Plugin.prototype.clear_all = function() {
        return $('#current_element_name').html("GrassCMS");
      };

      Plugin.prototype.mouseenter = function() {
        return this.style.border = '1px dotted grey';
      };

      Plugin.prototype.mouseleave = function() {
        $($(this).children()[0]).attr('contentEditable', 'false');
        this.style.border = '0px';
        if ($(this).css('height') !== $(this).data('height')) {
          $(this).trigger('changed', 'height', this.style.height);
          $(this).data('height', $(this).css('height'));
        }
        if ($(this).css('width') !== $(this).data('width')) {
          $(this).trigger('changed', 'width', this.style.width);
          return $(this).data('width', $(this).css('width'));
        }
      };

      Plugin.prototype.do_resizable = function() {
        this.element = this.element.wrap('<div class="resizable">').parent();
        this.element.data("width", this.element.css('width'));
        return this.element.data("height", this.element.css('height'));
      };

      Plugin.prototype.dragstart = function(ev) {
        $(this).trigger('click');
        $(this).data('opacity', this.style.opacity);
        this.style.border = '1px dotted grey';
        return this.style.opacity = 0.4;
      };

      Plugin.prototype.drag = function(ev) {
        $(this).attr('draggable', 'true');
        this.style.top = ev.originalEvent.y + "px";
        if (ev.originalEvent.x > $(this).data('offset')) {
          this.style.left = ev.originalEvent.x - $(this).data('offset') + "px";
        }
        return this.style.position = "absolute";
      };

      Plugin.prototype.dragend = function(ev) {
        this.style.opacity = $(this).data('opacity') > 0 ? $(this).data('opacity') : 1;
        $(this).trigger('changed', 'top', ev.y);
        return $(this).trigger('changed', 'left', ev.x);
      };

      Plugin.prototype.changed = function(attr, result) {
        var id;
        id = $(this).attr('id');
        return $.ajax('/object/', {
          type: 'PUT',
          dataType: 'json',
          data: JSON.stringify({
            'id': id,
            'attr': attr,
            'result': result
          })
        });
      };

      return Plugin;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    };
  })(jQuery, window);

  ($(document)).ready(function() {
    $('#menu').on('mouseout', function() {
      return $('#menu').hide();
    });
    $('html').on('contextmenu', function(ev) {
      $('#menu').css('top', ev.originalEvent.y - 15);
      $('#menu').css('left', ev.originalEvent.x - 300);
      $('#menu').show();
      return false;
    });
    return $('#colorpicker').on('change', function() {
      var foo;
      if ($('#panel_left').data('current_element')) {
        foo = '#' + $('panel_left').data('current_element');
        return $(foo).css('background', $('#colorpicker').val());
      } else {
        return $('body').css('background', $('#colorpicker').val());
      }
    });
  });

}).call(this);
